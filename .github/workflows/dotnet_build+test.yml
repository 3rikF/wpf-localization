name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:

  #----------------------------------------------------------------------------------------------------------------------------------------
  #build:
  #
  #  strategy:
  #    matrix:
  #      CONFIGURATION: [Debug, Release]
  #
  #  # For a list of available runner types, refer to
  #  # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
  #  runs-on: windows-latest
  #
  #  permissions:
  #    contents: read  # Required to checkout code
  #
  #  env:
  #    # Replace with your solution name, i.e. MyWpfApp.sln.
  #    SOLUTION_NAME: "./WpfLocalizationTest.slnx"
  #
  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v4
  #    with:
  #      fetch-depth: 0
  #
  #  # Install the .NET Core workload
  #  - name: Install .NET Core
  #    uses: actions/setup-dotnet@v4
  #    with:
  #      dotnet-version: 9.0.x
  #
  #  # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
  #  - name: Setup MSBuild.exe
  #    uses: microsoft/setup-msbuild@v2
  #
  #  # Restore the application
  #  - name: Restore the application
  #    run: dotnet restore $env:SOLUTION_NAME
  #
  #  # Build the solution
  #  - name: Build solution
  #    run: dotnet build $env:SOLUTION_NAME --configuration $env:Configuration --no-restore
  #    env:
  #      Configuration: ${{ matrix.CONFIGURATION }}
  #
  #  # Execute all unit tests in the solution without rebuilding
  #  - name: Execute unit tests
  #    run: dotnet test $env:SOLUTION_NAME --configuration $env:Configuration --no-build --collect:"XPlat Code Coverage;Format=json,cobertura"
  #    env:
  #      Configuration: ${{ matrix.CONFIGURATION }}
  #
  #  # taken from a Codecov example
  #  - name: Upload coverage reports to Codecov
  #    #uses: codecov/codecov-action@v4
  #    uses: codecov/codecov-action@v5
  #    with:
  #      token: ${{ secrets.CODECOV_TOKEN }}
  #      files: ./TestResults/**/*.cobertura.xml
  #      flags: unittests
  #  #   name: codecov-umbrella


  #----------------------------------------------------------------------------------------------------------------------------------------
  publish:
  #  needs: build
  #  # Only run on main branch when tests are successful
  #  if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required to create and push tags
      packages: write  # Required for publishing packages

    env:
      SOLUTION_NAME: "./WpfLocalizationTest.slnx"
      PROJECT_PATH: "./Source/ErikForwerk.Localization.WPF/ErikForwerk.Localization.WPF.csproj"

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Determine the latest version tag and calculate new version
    - name: Determine new version
      id: version
      run: |
        # Fetch all tags
        git fetch --tags

        # Get the latest version tag (assuming semantic versioning vX.Y.Z)
        $tags = git tag -l "v*.*.*"

        if ($tags.Count -eq 0) {
          # No existing tags, start with v0.0.0
          $latestTag = "v0.0.0"
        } else {
          # Sort tags by semantic version
          $validTags = $tags | ForEach-Object {
            $version = $_.TrimStart('v')
            $parts = $version.Split('.')
            # Validate tag format
            if ($parts.Count -eq 3 -and $parts[0] -match '^\d+$' -and $parts[1] -match '^\d+$' -and $parts[2] -match '^\d+$') {
              [PSCustomObject]@{
                Tag = $_
                Major = [int]$parts[0]
                Minor = [int]$parts[1]
                Patch = [int]$parts[2]
              }
            }
          }
          $latestTag = $validTags | Sort-Object -Property Major, Minor, Patch -Descending | Select-Object -First 1 | Select-Object -ExpandProperty Tag

          if ([string]::IsNullOrEmpty($latestTag)) {
            # No valid tags found, start with v0.0.0
            $latestTag = "v0.0.0"
          }
        }

        # Remove 'v' prefix and split version
        $version = $latestTag.TrimStart('v')
        $versionParts = $version.Split('.')
        $major = [int]$versionParts[0]
        $minor = [int]$versionParts[1]
        $patch = [int]$versionParts[2]

        # Bump version based on input
        $bump = "${{ github.event.inputs.bump }}"
        if ([string]::IsNullOrEmpty($bump)) {
          $bump = "patch"
        }

        switch ($bump) {
          "major" {
            $major++
            $minor = 0
            $patch = 0
          }
          "minor" {
            $minor++
            $patch = 0
          }
          "patch" {
            $patch++
          }
        }

        $newVersion = "$major.$minor.$patch"
        $newTag = "v$newVersion"

        #Write-Host "Previous version: $latestTag"
        #Write-Host "New version: $newTag"
        echo "Previous version: $latestTag"
        echo "New version: $newTag"

        # Set output
        echo "version=$newVersion" >> $env:GITHUB_OUTPUT
        echo "tag=$newTag" >> $env:GITHUB_OUTPUT

    # Create and push new version tag
    - name: Create version tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.version.outputs.tag }}
        git push origin ${{ steps.version.outputs.tag }}

    # Build the solution with new version
    - name: Build solution
      run: dotnet build $env:PROJECT_PATH --configuration Release /p:Version=${{ steps.version.outputs.version }}

    # Pack the NuGet package
    - name: Pack NuGet package
      run: dotnet pack $env:PROJECT_PATH --configuration Release /p:PackageVersion=${{ steps.version.outputs.version }} --output ./nupkg

    # Publish to NuGet.org
    - name: Publish to NuGet
      run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
